// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "proto/notifications/v1/notifications.proto" (package "proto.notifications.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NotificationService } from "./notifications";
import type { SendResponse } from "./notifications";
import type { SendRequest } from "./notifications";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Notification } from "./notifications";
import type { SubscribeRequest } from "./notifications";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service proto.notifications.v1.NotificationService
 */
export interface INotificationServiceClient {
    /**
     * @generated from protobuf rpc: Subscribe(proto.notifications.v1.SubscribeRequest) returns (stream proto.notifications.v1.Notification);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Notification>;
    /**
     * @generated from protobuf rpc: Send(proto.notifications.v1.SendRequest) returns (proto.notifications.v1.SendResponse);
     */
    send(input: SendRequest, options?: RpcOptions): UnaryCall<SendRequest, SendResponse>;
}
/**
 * @generated from protobuf service proto.notifications.v1.NotificationService
 */
export class NotificationServiceClient implements INotificationServiceClient, ServiceInfo {
    typeName = NotificationService.typeName;
    methods = NotificationService.methods;
    options = NotificationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Subscribe(proto.notifications.v1.SubscribeRequest) returns (stream proto.notifications.v1.Notification);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Notification> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRequest, Notification>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Send(proto.notifications.v1.SendRequest) returns (proto.notifications.v1.SendResponse);
     */
    send(input: SendRequest, options?: RpcOptions): UnaryCall<SendRequest, SendResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendRequest, SendResponse>("unary", this._transport, method, opt, input);
    }
}
